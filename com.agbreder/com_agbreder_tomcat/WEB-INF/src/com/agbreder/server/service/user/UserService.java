package com.agbreder.server.service.user;

import java.io.IOException;
import java.sql.SQLException;
import java.util.Map;

import breder.util.sql.HSQL;
import breder.util.sql.SqlTupla;
import breder.util.util.ThreadCacheMap;

import com.agbreder.server.model.user.User;
import com.agbreder.server.model.user.UserContext;
import com.agbreder.server.model.user.UserManager;
import com.agbreder.server.service.IService;
import com.agbreder.server.service.ServiceLocator;

/**
 * Serviço de Usuário
 * 
 * 
 * @author Bernardo Breder
 */
public class UserService implements IService {

  /** Cache de usuário */
  private Map<String, User> cacheUser = new ThreadCacheMap<String, User>(1024);

  /**
   * Construtor
   */
  public UserService() {
    try {
      HSQL.write("CREATE TABLE IF NOT EXISTS user ("
        + "id INTEGER GENERATED BY DEFAULT AS IDENTITY,"
        + "username VARCHAR(500) NOT NULL," + "email VARCHAR(500) NOT NULL,"
        + "password VARCHAR(500) NOT NULL" + ")");
      if (!tryLogin("bbreder", "bbreder")) {
        HSQL.insert("INSERT INTO user VALUES (?, ?, ?, ?)", null, "bbreder",
          "bernardobreder@gmail.com", "bbreder");
      }
    }
    catch (Exception e) {
      throw new Error(e);
    }
  }

  /**
   * Autentica um usuário
   * 
   * @param username
   * @param password
   * @param session
   * @return código do usuario
   * @throws IOException
   * @throws SQLException
   */
  public Integer login(String username, String password, String session)
    throws IOException, SQLException {
    int userId =
      HSQL.selectId("SELECT id FROM user WHERE username = ? and password = ?",
        username, password);
    if (userId != -1) {
      UserContext context = new UserContext();
      context.setUser(ServiceLocator.user.get(userId));
      UserManager.getInstance().setUserContext(session, context);
    }
    return userId;
  }

  /**
   * Autentica um usuário
   * 
   * @param username
   * @param password
   * @param session
   * @return código do usuario
   * @throws IOException
   * @throws SQLException
   */
  public boolean tryLogin(String username, String password) throws IOException,
    SQLException {
    int userId =
      HSQL.selectId("SELECT id FROM user WHERE username = ? and password = ?",
        username, password);
    return userId != -1;
  }

  /**
   * Retira a autenticação
   * 
   * @param session
   * @throws IOException
   * @throws SQLException
   */
  public void logout(String session) throws IOException, SQLException {
    UserManager.getInstance().removeUserContext(session);
  }

  /**
   * Cria uma conta
   * 
   * @param username
   * @param email
   * @param password
   * @return código do usuário
   * @throws IOException
   * @throws SQLException
   */
  public Integer create(String username, String email, String password)
    throws IOException, SQLException {
    return HSQL.insert("INSERT INTO user "
      + "(username, email, password) VALUES " + "(?, ?, ?)", username, email,
      password);
  }

  /**
   * Autentica um usuário
   * 
   * @param id
   * @return código do usuario
   * @throws IOException
   * @throws SQLException
   */
  public User get(int id) throws IOException, SQLException {
    SqlTupla row =
      HSQL.selectUnique("SELECT id, username, email "
        + "FROM user WHERE id = ?", id);
    if (row == null) {
      return null;
    }
    return buildUser(row);
  }

  /**
   * Autentica um usuário
   * 
   * @param username
   * @return código do usuario
   * @throws IOException
   * @throws SQLException
   */
  public User get(String username) throws IOException, SQLException {
    User user = cacheUser.get(username);
    if (user != null) {
      return user;
    }
    SqlTupla row =
      HSQL.selectUnique("SELECT id, username, email "
        + "FROM user WHERE username = ?", username);
    if (row == null) {
      return null;
    }
    user = buildUser(row);
    cacheUser.put(username, user);
    return user;
  }

  /**
   * Realiza um ping de um usuário
   */
  public void ping(int userId, String session) {
  }

  /**
   * Constroi um usuário
   * 
   * @param row
   * @return usuario
   */
  private User buildUser(SqlTupla row) {
    User user = new User();
    user.setId(row.getInt());
    user.setUsername(row.getString());
    user.setEmail(row.getString());
    return user;
  }

}
