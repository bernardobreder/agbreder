package com.agbreder.server.service.mail;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import breder.util.sql.HSQL;
import breder.util.sql.SqlTupla;
import breder.util.util.Base64;

import com.agbreder.server.model.AGMail;
import com.agbreder.server.service.IService;

/**
 * Servi√ßo de Mensagem
 * 
 * 
 * @author Bernardo Breder
 */
public class SqlMailService implements MailService, IService {

  /**
   * Construtor
   */
  public SqlMailService() {
    try {
      HSQL.write("CREATE TABLE IF NOT EXISTS message ("
        + "id INTEGER GENERATED BY DEFAULT AS IDENTITY,"
        + "subject VARCHAR(500)," + "from_user_id INTEGER NOT NULL,"
        + "to_user_id INTEGER NOT NULL," + "date TIMESTAMP DEFAULT now(),"
        + "input VARCHAR(500)," + "output VARCHAR(500)" + ")");
    }
    catch (SQLException e) {
      throw new Error(e);
    }
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public int send(int fromUserId, int toUserId, String subject, String input)
    throws IOException, SQLException {
    return HSQL.insert("INSERT INTO message "
      + "(subject, from_user_id, to_user_id, input) " + "VALUES (?, ?, ?, ?)",
      subject, fromUserId, toUserId, Base64.encode(input.getBytes()));
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void reply(int userId, int mailId, String text) throws IOException,
    SQLException {
    HSQL.update("UPDATE message " + "SET output = ? "
      + "WHERE id = ? and to_user_id = ?", Base64.encode(text.getBytes()),
      mailId, userId);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public AGMail pop(int userId, int mailId) throws IOException, SQLException {
    SqlTupla row =
      HSQL.selectUnique(
        "SELECT id, subject, from_user_id, to_user_id, date, input, output "
          + "FROM message "
          + "WHERE id = ? and from_user_id = ? and output is not null", mailId,
        userId);
    if (row == null) {
      return null;
    }
    HSQL.delete("DELETE FROM message WHERE id = ? and from_user_id = ?",
      mailId, userId);
    return build(row);
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public List<AGMail> list(int userId) throws IOException, SQLException {
    List<SqlTupla> rows =
      HSQL
        .select(
          "SELECT id, subject, from_user_id, to_user_id, date, input, output "
            + "FROM message " + "WHERE to_user_id = ? and output is null",
          userId);
    List<AGMail> list = new ArrayList<AGMail>(rows.size());
    for (int n = 0; n < rows.size(); n++) {
      SqlTupla row = rows.get(n);
      AGMail item = build(row);
      list.add(item);
    }
    return list;
  }

  /**
   * Constroi um PreMail
   * 
   * @param row
   * @return premail
   */
  private AGMail build(SqlTupla row) {
    int id = row.getInt();
    String subject = row.getString();
    int fromUserId = row.getInt();
    int toUserId = row.getInt();
    Date date = row.getDate();
    String input = row.getString();
    if (input != null) {
      input = new String(Base64.decode(input));
    }
    String output = row.getString();
    if (output != null) {
      output = new String(Base64.decode(output));
    }
    return new AGMail(id, subject, fromUserId, toUserId, date, input, output);
  }

}
